/**
 * Copyright (C) 2006-2013 phloc systems
 * http://www.phloc.com
 * office[at]phloc[dot]com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.phloc.html.js.builder.jquery;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;

import com.phloc.commons.annotations.Nonempty;
import com.phloc.html.js.builder.AbstractJSInvocation;
import com.phloc.html.js.builder.IJSExpression;
import com.phloc.html.js.builder.JSFieldRef;
import com.phloc.html.js.builder.JSFunction;

/**
 * Special invocation semantics for jQuery
 * 
 * @author Philip Helger
 */
public abstract class AbstractJQueryInvocation <IMPLTYPE extends AbstractJQueryInvocation <IMPLTYPE>> extends AbstractJSInvocation <IMPLTYPE>
{
  public AbstractJQueryInvocation (@Nonnull final JSFunction aFunction)
  {
    super (aFunction);
  }

  public AbstractJQueryInvocation (@Nullable final IJSExpression aLhs, @Nonnull @Nonempty final String sMethod)
  {
    super (aLhs, sMethod);
  }

  /**
   * Invoke an arbitrary function on this jQuery object.
   * 
   * @param sMethod
   *        The method to be invoked. May neither be <code>null</code> nor
   *        empty.
   * @return A new jQuery invocation object. Never <code>null</code>.
   */
  @Nonnull
  public abstract IMPLTYPE jqinvoke (@Nonnull @Nonempty final String sMethod);

  /**
   * Adds a JQuery selector as a string argument.
   * 
   * @param aArgument
   *        value to be added as an argument
   * @return this
   */
  @Nonnull
  public IMPLTYPE arg (@Nullable final IJQuerySelector aArgument)
  {
    return aArgument == null ? argNull () : arg (aArgument.getExpression ());
  }

  /**
   * Adds a JQuery selector list as a string argument.
   * 
   * @param aArgument
   *        value to be added as an argument
   * @return this
   */
  @Nonnull
  public IMPLTYPE arg (@Nullable final JQuerySelectorList aArgument)
  {
    return aArgument == null ? argNull () : arg (aArgument.getAsExpression ());
  }

  // Properties of jQuery Object Instances

  /**
   * @return The invocation of the jQuery function <code>context()</code>
   * @since jQuery 1.3
   * @deprecated Deprecated since jQuery 1.10
   */
  @Deprecated
  @Nonnull
  public JSFieldRef context ()
  {
    return ref ("context");
  }

  /**
   * @return The invocation of the jQuery field <code>jquery</code>
   */
  @Nonnull
  public JSFieldRef jquery ()
  {
    return ref ("jquery");
  }

  /**
   * @return The invocation of the jQuery field <code>length()</code>
   */
  @Nonnull
  public JSFieldRef length ()
  {
    return ref ("length");
  }

  // Rest - from here on generated by MainCreateJQueryAPIList

  /**
   * @return The invocation of the jQuery function <code>add()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE add ()
  {
    return jqinvoke ("add");
  }

  /**
   * @return The invocation of the jQuery function <code>addBack()</code> with
   *         return type jQuery
   * @since jQuery 1.8
   */
  @Nonnull
  public final IMPLTYPE addBack ()
  {
    return jqinvoke ("addBack");
  }

  /**
   * @return The invocation of the jQuery function <code>addClass()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE addClass ()
  {
    return jqinvoke ("addClass");
  }

  /**
   * @return The invocation of the jQuery function <code>after()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE after ()
  {
    return jqinvoke ("after");
  }

  /**
   * @return The invocation of the jQuery function <code>ajaxComplete()</code>
   *         with return type jQuery
   */
  @Nonnull
  public final IMPLTYPE ajaxComplete ()
  {
    return jqinvoke ("ajaxComplete");
  }

  /**
   * @return The invocation of the jQuery function <code>ajaxError()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE ajaxError ()
  {
    return jqinvoke ("ajaxError");
  }

  /**
   * @return The invocation of the jQuery function <code>ajaxSend()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE ajaxSend ()
  {
    return jqinvoke ("ajaxSend");
  }

  /**
   * @return The invocation of the jQuery function <code>ajaxStart()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE ajaxStart ()
  {
    return jqinvoke ("ajaxStart");
  }

  /**
   * @return The invocation of the jQuery function <code>ajaxStop()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE ajaxStop ()
  {
    return jqinvoke ("ajaxStop");
  }

  /**
   * @return The invocation of the jQuery function <code>ajaxSuccess()</code>
   *         with return type jQuery
   */
  @Nonnull
  public final IMPLTYPE ajaxSuccess ()
  {
    return jqinvoke ("ajaxSuccess");
  }

  /**
   * @return The invocation of the jQuery function <code>andSelf()</code> with
   *         return type jQuery
   * @deprecated Deprecated since jQuery 1.8
   * @since jQuery 1.2
   */
  @Nonnull
  @Deprecated
  public final IMPLTYPE andSelf ()
  {
    return jqinvoke ("andSelf");
  }

  /**
   * @return The invocation of the jQuery function <code>animate()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE animate ()
  {
    return jqinvoke ("animate");
  }

  /**
   * @return The invocation of the jQuery function <code>append()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE append ()
  {
    return jqinvoke ("append");
  }

  /**
   * @return The invocation of the jQuery function <code>appendTo()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE appendTo ()
  {
    return jqinvoke ("appendTo");
  }

  /**
   * @return The invocation of the jQuery function <code>attr()</code> with
   *         return type String or jQuery
   */
  @Nonnull
  public final IMPLTYPE attr ()
  {
    return jqinvoke ("attr");
  }

  /**
   * @return The invocation of the jQuery function <code>before()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE before ()
  {
    return jqinvoke ("before");
  }

  /**
   * @return The invocation of the jQuery function <code>bind()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE bind ()
  {
    return jqinvoke ("bind");
  }

  /**
   * @return The invocation of the jQuery function <code>blur()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE blur ()
  {
    return jqinvoke ("blur");
  }

  /**
   * @return The invocation of the jQuery callbacks function <code>add()</code>
   *         with return type Callbacks
   * @since jQuery 1.7
   */
  @Nonnull
  public final IMPLTYPE callbacks_add ()
  {
    return jqinvoke ("add");
  }

  /**
   * @return The invocation of the jQuery callbacks function
   *         <code>disable()</code> with return type Callbacks
   * @since jQuery 1.7
   */
  @Nonnull
  public final IMPLTYPE callbacks_disable ()
  {
    return jqinvoke ("disable");
  }

  /**
   * @return The invocation of the jQuery callbacks function
   *         <code>disabled()</code> with return type Boolean
   * @since jQuery 1.7
   */
  @Nonnull
  public final IMPLTYPE callbacks_disabled ()
  {
    return jqinvoke ("disabled");
  }

  /**
   * @return The invocation of the jQuery callbacks function
   *         <code>empty()</code> with return type Callbacks
   * @since jQuery 1.7
   */
  @Nonnull
  public final IMPLTYPE callbacks_empty ()
  {
    return jqinvoke ("empty");
  }

  /**
   * @return The invocation of the jQuery callbacks function <code>fire()</code>
   *         with return type Callbacks
   * @since jQuery 1.7
   */
  @Nonnull
  public final IMPLTYPE callbacks_fire ()
  {
    return jqinvoke ("fire");
  }

  /**
   * @return The invocation of the jQuery callbacks function
   *         <code>fireWith()</code> with return type Callbacks
   * @since jQuery 1.7
   */
  @Nonnull
  public final IMPLTYPE callbacks_fireWith ()
  {
    return jqinvoke ("fireWith");
  }

  /**
   * @return The invocation of the jQuery callbacks function
   *         <code>fired()</code> with return type Boolean
   * @since jQuery 1.7
   */
  @Nonnull
  public final IMPLTYPE callbacks_fired ()
  {
    return jqinvoke ("fired");
  }

  /**
   * @return The invocation of the jQuery callbacks function <code>has()</code>
   *         with return type Boolean
   * @since jQuery 1.7
   */
  @Nonnull
  public final IMPLTYPE callbacks_has ()
  {
    return jqinvoke ("has");
  }

  /**
   * @return The invocation of the jQuery callbacks function <code>lock()</code>
   *         with return type Callbacks
   * @since jQuery 1.7
   */
  @Nonnull
  public final IMPLTYPE callbacks_lock ()
  {
    return jqinvoke ("lock");
  }

  /**
   * @return The invocation of the jQuery callbacks function
   *         <code>locked()</code> with return type Boolean
   * @since jQuery 1.7
   */
  @Nonnull
  public final IMPLTYPE callbacks_locked ()
  {
    return jqinvoke ("locked");
  }

  /**
   * @return The invocation of the jQuery callbacks function
   *         <code>remove()</code> with return type Callbacks
   * @since jQuery 1.7
   */
  @Nonnull
  public final IMPLTYPE callbacks_remove ()
  {
    return jqinvoke ("remove");
  }

  /**
   * @return The invocation of the jQuery function <code>change()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE change ()
  {
    return jqinvoke ("change");
  }

  /**
   * @return The invocation of the jQuery function <code>children()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE children ()
  {
    return jqinvoke ("children");
  }

  /**
   * @return The invocation of the jQuery function <code>clearQueue()</code>
   *         with return type jQuery
   * @since jQuery 1.4
   */
  @Nonnull
  public final IMPLTYPE clearQueue ()
  {
    return jqinvoke ("clearQueue");
  }

  /**
   * @return The invocation of the jQuery function <code>click()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE click ()
  {
    return jqinvoke ("click");
  }

  /**
   * @return The invocation of the jQuery function <code>clone()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE _clone ()
  {
    return jqinvoke ("clone");
  }

  /**
   * Certain versions of this method are deprecated since jQuery 1.7
   * 
   * @return The invocation of the jQuery function <code>closest()</code> with
   *         return type jQuery or Array
   */
  @Nonnull
  public final IMPLTYPE closest ()
  {
    return jqinvoke ("closest");
  }

  /**
   * @return The invocation of the jQuery function <code>contents()</code> with
   *         return type jQuery
   * @since jQuery 1.2
   */
  @Nonnull
  public final IMPLTYPE contents ()
  {
    return jqinvoke ("contents");
  }

  /**
   * @return The invocation of the jQuery function <code>css()</code> with
   *         return type String or jQuery
   */
  @Nonnull
  public final IMPLTYPE css ()
  {
    return jqinvoke ("css");
  }

  /**
   * @return The invocation of the jQuery function <code>data()</code> with
   *         return type jQuery or Object
   */
  @Nonnull
  public final IMPLTYPE data ()
  {
    return jqinvoke ("data");
  }

  /**
   * @return The invocation of the jQuery function <code>dblclick()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE dblclick ()
  {
    return jqinvoke ("dblclick");
  }

  /**
   * @return The invocation of the jQuery deferred function
   *         <code>always()</code> with return type Deferred
   * @since jQuery 1.6
   */
  @Nonnull
  public final IMPLTYPE deferred_always ()
  {
    return jqinvoke ("always");
  }

  /**
   * @return The invocation of the jQuery deferred function <code>done()</code>
   *         with return type Deferred
   * @since jQuery 1.5
   */
  @Nonnull
  public final IMPLTYPE deferred_done ()
  {
    return jqinvoke ("done");
  }

  /**
   * @return The invocation of the jQuery deferred function <code>fail()</code>
   *         with return type Deferred
   * @since jQuery 1.5
   */
  @Nonnull
  public final IMPLTYPE deferred_fail ()
  {
    return jqinvoke ("fail");
  }

  /**
   * @return The invocation of the jQuery deferred function
   *         <code>isRejected()</code> with return type Boolean
   * @deprecated Deprecated since jQuery 1.7
   * @since jQuery 1.5
   */
  @Nonnull
  @Deprecated
  public final IMPLTYPE deferred_isRejected ()
  {
    return jqinvoke ("isRejected");
  }

  /**
   * @return The invocation of the jQuery deferred function
   *         <code>isResolved()</code> with return type Boolean
   * @deprecated Deprecated since jQuery 1.7
   * @since jQuery 1.5
   */
  @Nonnull
  @Deprecated
  public final IMPLTYPE deferred_isResolved ()
  {
    return jqinvoke ("isResolved");
  }

  /**
   * @return The invocation of the jQuery deferred function
   *         <code>notify()</code> with return type Deferred
   * @since jQuery 1.7
   */
  @Nonnull
  public final IMPLTYPE deferred_notify ()
  {
    return jqinvoke ("notify");
  }

  /**
   * @return The invocation of the jQuery deferred function
   *         <code>notifyWith()</code> with return type Deferred
   * @since jQuery 1.7
   */
  @Nonnull
  public final IMPLTYPE deferred_notifyWith ()
  {
    return jqinvoke ("notifyWith");
  }

  /**
   * @return The invocation of the jQuery deferred function <code>pipe()</code>
   *         with return type Promise
   * @deprecated Deprecated since jQuery 1.8
   */
  @Nonnull
  @Deprecated
  public final IMPLTYPE deferred_pipe ()
  {
    return jqinvoke ("pipe");
  }

  /**
   * @return The invocation of the jQuery deferred function
   *         <code>progress()</code> with return type Deferred
   * @since jQuery 1.7
   */
  @Nonnull
  public final IMPLTYPE deferred_progress ()
  {
    return jqinvoke ("progress");
  }

  /**
   * @return The invocation of the jQuery deferred function
   *         <code>promise()</code> with return type Promise
   * @since jQuery 1.5
   */
  @Nonnull
  public final IMPLTYPE deferred_promise ()
  {
    return jqinvoke ("promise");
  }

  /**
   * @return The invocation of the jQuery deferred function
   *         <code>reject()</code> with return type Deferred
   * @since jQuery 1.5
   */
  @Nonnull
  public final IMPLTYPE deferred_reject ()
  {
    return jqinvoke ("reject");
  }

  /**
   * @return The invocation of the jQuery deferred function
   *         <code>rejectWith()</code> with return type Deferred
   * @since jQuery 1.5
   */
  @Nonnull
  public final IMPLTYPE deferred_rejectWith ()
  {
    return jqinvoke ("rejectWith");
  }

  /**
   * @return The invocation of the jQuery deferred function
   *         <code>resolve()</code> with return type Deferred
   * @since jQuery 1.5
   */
  @Nonnull
  public final IMPLTYPE deferred_resolve ()
  {
    return jqinvoke ("resolve");
  }

  /**
   * @return The invocation of the jQuery deferred function
   *         <code>resolveWith()</code> with return type Deferred
   * @since jQuery 1.5
   */
  @Nonnull
  public final IMPLTYPE deferred_resolveWith ()
  {
    return jqinvoke ("resolveWith");
  }

  /**
   * @return The invocation of the jQuery deferred function <code>state()</code>
   *         with return type String
   * @since jQuery 1.7
   */
  @Nonnull
  public final IMPLTYPE deferred_state ()
  {
    return jqinvoke ("state");
  }

  /**
   * @return The invocation of the jQuery deferred function <code>then()</code>
   *         with return type Promise
   */
  @Nonnull
  public final IMPLTYPE deferred_then ()
  {
    return jqinvoke ("then");
  }

  /**
   * @return The invocation of the jQuery function <code>delay()</code> with
   *         return type jQuery
   * @since jQuery 1.4
   */
  @Nonnull
  public final IMPLTYPE delay ()
  {
    return jqinvoke ("delay");
  }

  /**
   * @return The invocation of the jQuery function <code>delegate()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE delegate ()
  {
    return jqinvoke ("delegate");
  }

  /**
   * @return The invocation of the jQuery function <code>dequeue()</code> with
   *         return type jQuery
   * @since jQuery 1.2
   */
  @Nonnull
  public final IMPLTYPE dequeue ()
  {
    return jqinvoke ("dequeue");
  }

  /**
   * @return The invocation of the jQuery function <code>detach()</code> with
   *         return type jQuery
   * @since jQuery 1.4
   */
  @Nonnull
  public final IMPLTYPE detach ()
  {
    return jqinvoke ("detach");
  }

  /**
   * @return The invocation of the jQuery function <code>die()</code> with
   *         return type jQuery
   * @deprecated Deprecated since jQuery 1.7
   */
  @Nonnull
  @Deprecated
  public final IMPLTYPE die ()
  {
    return jqinvoke ("die");
  }

  /**
   * @return The invocation of the jQuery function <code>each()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE each ()
  {
    return jqinvoke ("each");
  }

  /**
   * @return The invocation of the jQuery function <code>empty()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE empty ()
  {
    return jqinvoke ("empty");
  }

  /**
   * @return The invocation of the jQuery function <code>end()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE end ()
  {
    return jqinvoke ("end");
  }

  /**
   * @return The invocation of the jQuery function <code>eq()</code> with return
   *         type jQuery
   */
  @Nonnull
  public final IMPLTYPE _eq ()
  {
    return jqinvoke ("eq");
  }

  /**
   * @return The invocation of the jQuery function <code>error()</code> with
   *         return type jQuery
   * @deprecated Deprecated since jQuery 1.8
   */
  @Nonnull
  @Deprecated
  public final IMPLTYPE error ()
  {
    return jqinvoke ("error");
  }

  /**
   * @return The invocation of the jQuery event function
   *         <code>isDefaultPrevented()</code> with return type Boolean
   * @since jQuery 1.3
   */
  @Nonnull
  public final IMPLTYPE event_isDefaultPrevented ()
  {
    return jqinvoke ("isDefaultPrevented");
  }

  /**
   * @return The invocation of the jQuery event function
   *         <code>isImmediatePropagationStopped()</code> with return type
   *         Boolean
   * @since jQuery 1.3
   */
  @Nonnull
  public final IMPLTYPE event_isImmediatePropagationStopped ()
  {
    return jqinvoke ("isImmediatePropagationStopped");
  }

  /**
   * @return The invocation of the jQuery event function
   *         <code>isPropagationStopped()</code> with return type Boolean
   * @since jQuery 1.3
   */
  @Nonnull
  public final IMPLTYPE event_isPropagationStopped ()
  {
    return jqinvoke ("isPropagationStopped");
  }

  /**
   * @return The invocation of the jQuery event function
   *         <code>preventDefault()</code> with return type undefined
   */
  @Nonnull
  public final IMPLTYPE event_preventDefault ()
  {
    return jqinvoke ("preventDefault");
  }

  /**
   * @return The invocation of the jQuery event function
   *         <code>stopImmediatePropagation()</code> with return type
   * @since jQuery 1.3
   */
  @Nonnull
  public final IMPLTYPE event_stopImmediatePropagation ()
  {
    return jqinvoke ("stopImmediatePropagation");
  }

  /**
   * @return The invocation of the jQuery event function
   *         <code>stopPropagation()</code> with return type
   */
  @Nonnull
  public final IMPLTYPE event_stopPropagation ()
  {
    return jqinvoke ("stopPropagation");
  }

  /**
   * @return The invocation of the jQuery function <code>fadeIn()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE fadeIn ()
  {
    return jqinvoke ("fadeIn");
  }

  /**
   * @return The invocation of the jQuery function <code>fadeOut()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE fadeOut ()
  {
    return jqinvoke ("fadeOut");
  }

  /**
   * @return The invocation of the jQuery function <code>fadeTo()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE fadeTo ()
  {
    return jqinvoke ("fadeTo");
  }

  /**
   * @return The invocation of the jQuery function <code>fadeToggle()</code>
   *         with return type jQuery
   */
  @Nonnull
  public final IMPLTYPE fadeToggle ()
  {
    return jqinvoke ("fadeToggle");
  }

  /**
   * @return The invocation of the jQuery function <code>filter()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE filter ()
  {
    return jqinvoke ("filter");
  }

  /**
   * @return The invocation of the jQuery function <code>find()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE find ()
  {
    return jqinvoke ("find");
  }

  /**
   * @return The invocation of the jQuery function <code>finish()</code> with
   *         return type jQuery
   * @since jQuery 1.9
   */
  @Nonnull
  public final IMPLTYPE finish ()
  {
    return jqinvoke ("finish");
  }

  /**
   * @return The invocation of the jQuery function <code>first()</code> with
   *         return type jQuery
   * @since jQuery 1.4
   */
  @Nonnull
  public final IMPLTYPE first ()
  {
    return jqinvoke ("first");
  }

  /**
   * @return The invocation of the jQuery function <code>focus()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE focus ()
  {
    return jqinvoke ("focus");
  }

  /**
   * @return The invocation of the jQuery function <code>focusin()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE focusin ()
  {
    return jqinvoke ("focusin");
  }

  /**
   * @return The invocation of the jQuery function <code>focusout()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE focusout ()
  {
    return jqinvoke ("focusout");
  }

  /**
   * @return The invocation of the jQuery function <code>get()</code> with
   *         return type Element or Array
   */
  @Nonnull
  public final IMPLTYPE get ()
  {
    return jqinvoke ("get");
  }

  /**
   * @return The invocation of the jQuery function <code>has()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE has ()
  {
    return jqinvoke ("has");
  }

  /**
   * @return The invocation of the jQuery function <code>hasClass()</code> with
   *         return type Boolean
   * @since jQuery 1.2
   */
  @Nonnull
  public final IMPLTYPE hasClass ()
  {
    return jqinvoke ("hasClass");
  }

  /**
   * @return The invocation of the jQuery function <code>height()</code> with
   *         return type Integer or jQuery
   */
  @Nonnull
  public final IMPLTYPE height ()
  {
    return jqinvoke ("height");
  }

  /**
   * @return The invocation of the jQuery function <code>hide()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE hide ()
  {
    return jqinvoke ("hide");
  }

  /**
   * @return The invocation of the jQuery function <code>hover()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE hover ()
  {
    return jqinvoke ("hover");
  }

  /**
   * @return The invocation of the jQuery function <code>html()</code> with
   *         return type String or jQuery
   */
  @Nonnull
  public final IMPLTYPE html ()
  {
    return jqinvoke ("html");
  }

  /**
   * @return The invocation of the jQuery function <code>index()</code> with
   *         return type Number
   */
  @Nonnull
  public final IMPLTYPE index ()
  {
    return jqinvoke ("index");
  }

  /**
   * @return The invocation of the jQuery function <code>innerHeight()</code>
   *         with return type Integer
   * @since jQuery 1.2.6
   */
  @Nonnull
  public final IMPLTYPE innerHeight ()
  {
    return jqinvoke ("innerHeight");
  }

  /**
   * @return The invocation of the jQuery function <code>innerWidth()</code>
   *         with return type Integer
   * @since jQuery 1.2.6
   */
  @Nonnull
  public final IMPLTYPE innerWidth ()
  {
    return jqinvoke ("innerWidth");
  }

  /**
   * @return The invocation of the jQuery function <code>insertAfter()</code>
   *         with return type jQuery
   */
  @Nonnull
  public final IMPLTYPE insertAfter ()
  {
    return jqinvoke ("insertAfter");
  }

  /**
   * @return The invocation of the jQuery function <code>insertBefore()</code>
   *         with return type jQuery
   */
  @Nonnull
  public final IMPLTYPE insertBefore ()
  {
    return jqinvoke ("insertBefore");
  }

  /**
   * @return The invocation of the jQuery function <code>is()</code> with return
   *         type Boolean
   */
  @Nonnull
  public final IMPLTYPE is ()
  {
    return jqinvoke ("is");
  }

  /**
   * @return The invocation of the jQuery function <code>jQuery()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE jQuery ()
  {
    return jqinvoke ("jQuery");
  }

  /**
   * @return The invocation of the jQuery function <code>keydown()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE keydown ()
  {
    return jqinvoke ("keydown");
  }

  /**
   * @return The invocation of the jQuery function <code>keypress()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE keypress ()
  {
    return jqinvoke ("keypress");
  }

  /**
   * @return The invocation of the jQuery function <code>keyup()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE keyup ()
  {
    return jqinvoke ("keyup");
  }

  /**
   * @return The invocation of the jQuery function <code>last()</code> with
   *         return type jQuery
   * @since jQuery 1.4
   */
  @Nonnull
  public final IMPLTYPE last ()
  {
    return jqinvoke ("last");
  }

  /**
   * @return The invocation of the jQuery function <code>live()</code> with
   *         return type jQuery
   * @deprecated Deprecated since jQuery 1.7
   */
  @Nonnull
  @Deprecated
  public final IMPLTYPE live ()
  {
    return jqinvoke ("live");
  }

  /**
   * Certain versions of this method are deprecated since jQuery 1.8
   * 
   * @return The invocation of the jQuery function <code>load()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE load ()
  {
    return jqinvoke ("load");
  }

  /**
   * @return The invocation of the jQuery function <code>map()</code> with
   *         return type jQuery
   * @since jQuery 1.2
   */
  @Nonnull
  public final IMPLTYPE map ()
  {
    return jqinvoke ("map");
  }

  /**
   * @return The invocation of the jQuery function <code>mousedown()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE mousedown ()
  {
    return jqinvoke ("mousedown");
  }

  /**
   * @return The invocation of the jQuery function <code>mouseenter()</code>
   *         with return type jQuery
   */
  @Nonnull
  public final IMPLTYPE mouseenter ()
  {
    return jqinvoke ("mouseenter");
  }

  /**
   * @return The invocation of the jQuery function <code>mouseleave()</code>
   *         with return type jQuery
   */
  @Nonnull
  public final IMPLTYPE mouseleave ()
  {
    return jqinvoke ("mouseleave");
  }

  /**
   * @return The invocation of the jQuery function <code>mousemove()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE mousemove ()
  {
    return jqinvoke ("mousemove");
  }

  /**
   * @return The invocation of the jQuery function <code>mouseout()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE mouseout ()
  {
    return jqinvoke ("mouseout");
  }

  /**
   * @return The invocation of the jQuery function <code>mouseover()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE mouseover ()
  {
    return jqinvoke ("mouseover");
  }

  /**
   * @return The invocation of the jQuery function <code>mouseup()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE mouseup ()
  {
    return jqinvoke ("mouseup");
  }

  /**
   * @return The invocation of the jQuery function <code>next()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE next ()
  {
    return jqinvoke ("next");
  }

  /**
   * @return The invocation of the jQuery function <code>nextAll()</code> with
   *         return type jQuery
   * @since jQuery 1.2
   */
  @Nonnull
  public final IMPLTYPE nextAll ()
  {
    return jqinvoke ("nextAll");
  }

  /**
   * @return The invocation of the jQuery function <code>nextUntil()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE nextUntil ()
  {
    return jqinvoke ("nextUntil");
  }

  /**
   * @return The invocation of the jQuery function <code>not()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE _not ()
  {
    return jqinvoke ("not");
  }

  /**
   * @return The invocation of the jQuery function <code>off()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE off ()
  {
    return jqinvoke ("off");
  }

  /**
   * @return The invocation of the jQuery function <code>offset()</code> with
   *         return type Object or jQuery
   */
  @Nonnull
  public final IMPLTYPE offset ()
  {
    return jqinvoke ("offset");
  }

  /**
   * @return The invocation of the jQuery function <code>offsetParent()</code>
   *         with return type jQuery
   * @since jQuery 1.2.6
   */
  @Nonnull
  public final IMPLTYPE offsetParent ()
  {
    return jqinvoke ("offsetParent");
  }

  /**
   * @return The invocation of the jQuery function <code>on()</code> with return
   *         type jQuery
   */
  @Nonnull
  public final IMPLTYPE on ()
  {
    return jqinvoke ("on");
  }

  /**
   * @return The invocation of the jQuery function <code>one()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE one ()
  {
    return jqinvoke ("one");
  }

  /**
   * @return The invocation of the jQuery function <code>outerHeight()</code>
   *         with return type Integer
   * @since jQuery 1.2.6
   */
  @Nonnull
  public final IMPLTYPE outerHeight ()
  {
    return jqinvoke ("outerHeight");
  }

  /**
   * @return The invocation of the jQuery function <code>outerWidth()</code>
   *         with return type Integer
   * @since jQuery 1.2.6
   */
  @Nonnull
  public final IMPLTYPE outerWidth ()
  {
    return jqinvoke ("outerWidth");
  }

  /**
   * @return The invocation of the jQuery function <code>parent()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE parent ()
  {
    return jqinvoke ("parent");
  }

  /**
   * @return The invocation of the jQuery function <code>parents()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE parents ()
  {
    return jqinvoke ("parents");
  }

  /**
   * @return The invocation of the jQuery function <code>parentsUntil()</code>
   *         with return type jQuery
   */
  @Nonnull
  public final IMPLTYPE parentsUntil ()
  {
    return jqinvoke ("parentsUntil");
  }

  /**
   * @return The invocation of the jQuery function <code>position()</code> with
   *         return type Object
   * @since jQuery 1.2
   */
  @Nonnull
  public final IMPLTYPE position ()
  {
    return jqinvoke ("position");
  }

  /**
   * @return The invocation of the jQuery function <code>prepend()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE prepend ()
  {
    return jqinvoke ("prepend");
  }

  /**
   * @return The invocation of the jQuery function <code>prependTo()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE prependTo ()
  {
    return jqinvoke ("prependTo");
  }

  /**
   * @return The invocation of the jQuery function <code>prev()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE prev ()
  {
    return jqinvoke ("prev");
  }

  /**
   * @return The invocation of the jQuery function <code>prevAll()</code> with
   *         return type jQuery
   * @since jQuery 1.2
   */
  @Nonnull
  public final IMPLTYPE prevAll ()
  {
    return jqinvoke ("prevAll");
  }

  /**
   * @return The invocation of the jQuery function <code>prevUntil()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE prevUntil ()
  {
    return jqinvoke ("prevUntil");
  }

  /**
   * @return The invocation of the jQuery function <code>promise()</code> with
   *         return type Promise
   * @since jQuery 1.6
   */
  @Nonnull
  public final IMPLTYPE promise ()
  {
    return jqinvoke ("promise");
  }

  /**
   * @return The invocation of the jQuery function <code>prop()</code> with
   *         return type null or jQuery
   */
  @Nonnull
  public final IMPLTYPE prop ()
  {
    return jqinvoke ("prop");
  }

  /**
   * @return The invocation of the jQuery function <code>pushStack()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE pushStack ()
  {
    return jqinvoke ("pushStack");
  }

  /**
   * @return The invocation of the jQuery function <code>queue()</code> with
   *         return type Array or jQuery
   */
  @Nonnull
  public final IMPLTYPE queue ()
  {
    return jqinvoke ("queue");
  }

  /**
   * @return The invocation of the jQuery function <code>ready()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE ready ()
  {
    return jqinvoke ("ready");
  }

  /**
   * @return The invocation of the jQuery function <code>remove()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE remove ()
  {
    return jqinvoke ("remove");
  }

  /**
   * @return The invocation of the jQuery function <code>removeAttr()</code>
   *         with return type jQuery
   */
  @Nonnull
  public final IMPLTYPE removeAttr ()
  {
    return jqinvoke ("removeAttr");
  }

  /**
   * @return The invocation of the jQuery function <code>removeClass()</code>
   *         with return type jQuery
   */
  @Nonnull
  public final IMPLTYPE removeClass ()
  {
    return jqinvoke ("removeClass");
  }

  /**
   * @return The invocation of the jQuery function <code>removeData()</code>
   *         with return type jQuery
   */
  @Nonnull
  public final IMPLTYPE removeData ()
  {
    return jqinvoke ("removeData");
  }

  /**
   * @return The invocation of the jQuery function <code>removeProp()</code>
   *         with return type jQuery
   * @since jQuery 1.6
   */
  @Nonnull
  public final IMPLTYPE removeProp ()
  {
    return jqinvoke ("removeProp");
  }

  /**
   * @return The invocation of the jQuery function <code>replaceAll()</code>
   *         with return type jQuery
   * @since jQuery 1.2
   */
  @Nonnull
  public final IMPLTYPE replaceAll ()
  {
    return jqinvoke ("replaceAll");
  }

  /**
   * @return The invocation of the jQuery function <code>replaceWith()</code>
   *         with return type jQuery
   */
  @Nonnull
  public final IMPLTYPE replaceWith ()
  {
    return jqinvoke ("replaceWith");
  }

  /**
   * @return The invocation of the jQuery function <code>resize()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE resize ()
  {
    return jqinvoke ("resize");
  }

  /**
   * @return The invocation of the jQuery function <code>scroll()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE scroll ()
  {
    return jqinvoke ("scroll");
  }

  /**
   * @return The invocation of the jQuery function <code>scrollLeft()</code>
   *         with return type Integer or jQuery
   */
  @Nonnull
  public final IMPLTYPE scrollLeft ()
  {
    return jqinvoke ("scrollLeft");
  }

  /**
   * @return The invocation of the jQuery function <code>scrollTop()</code> with
   *         return type Integer or jQuery
   */
  @Nonnull
  public final IMPLTYPE scrollTop ()
  {
    return jqinvoke ("scrollTop");
  }

  /**
   * @return The invocation of the jQuery function <code>select()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE select ()
  {
    return jqinvoke ("select");
  }

  /**
   * @return The invocation of the jQuery function <code>serialize()</code> with
   *         return type String
   */
  @Nonnull
  public final IMPLTYPE serialize ()
  {
    return jqinvoke ("serialize");
  }

  /**
   * @return The invocation of the jQuery function <code>serializeArray()</code>
   *         with return type Array
   * @since jQuery 1.2
   */
  @Nonnull
  public final IMPLTYPE serializeArray ()
  {
    return jqinvoke ("serializeArray");
  }

  /**
   * @return The invocation of the jQuery function <code>show()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE show ()
  {
    return jqinvoke ("show");
  }

  /**
   * @return The invocation of the jQuery function <code>siblings()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE siblings ()
  {
    return jqinvoke ("siblings");
  }

  /**
   * @return The invocation of the jQuery function <code>size()</code> with
   *         return type Integer
   * @deprecated Deprecated since jQuery 1.8
   */
  @Nonnull
  @Deprecated
  public final IMPLTYPE size ()
  {
    return jqinvoke ("size");
  }

  /**
   * @return The invocation of the jQuery function <code>slice()</code> with
   *         return type jQuery
   * @since jQuery 1.1.4
   */
  @Nonnull
  public final IMPLTYPE slice ()
  {
    return jqinvoke ("slice");
  }

  /**
   * @return The invocation of the jQuery function <code>slideDown()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE slideDown ()
  {
    return jqinvoke ("slideDown");
  }

  /**
   * @return The invocation of the jQuery function <code>slideToggle()</code>
   *         with return type jQuery
   */
  @Nonnull
  public final IMPLTYPE slideToggle ()
  {
    return jqinvoke ("slideToggle");
  }

  /**
   * @return The invocation of the jQuery function <code>slideUp()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE slideUp ()
  {
    return jqinvoke ("slideUp");
  }

  /**
   * @return The invocation of the jQuery function <code>stop()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE stop ()
  {
    return jqinvoke ("stop");
  }

  /**
   * @return The invocation of the jQuery function <code>submit()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE submit ()
  {
    return jqinvoke ("submit");
  }

  /**
   * @return The invocation of the jQuery function <code>text()</code> with
   *         return type String or jQuery
   */
  @Nonnull
  public final IMPLTYPE text ()
  {
    return jqinvoke ("text");
  }

  /**
   * @return The invocation of the jQuery function <code>toArray()</code> with
   *         return type Array
   * @since jQuery 1.4
   */
  @Nonnull
  public final IMPLTYPE toArray ()
  {
    return jqinvoke ("toArray");
  }

  /**
   * Certain versions of this method are deprecated since jQuery 1.8
   * 
   * @return The invocation of the jQuery function <code>toggle()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE toggle ()
  {
    return jqinvoke ("toggle");
  }

  /**
   * @return The invocation of the jQuery function <code>toggleClass()</code>
   *         with return type jQuery
   */
  @Nonnull
  public final IMPLTYPE toggleClass ()
  {
    return jqinvoke ("toggleClass");
  }

  /**
   * @return The invocation of the jQuery function <code>trigger()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE trigger ()
  {
    return jqinvoke ("trigger");
  }

  /**
   * @return The invocation of the jQuery function <code>triggerHandler()</code>
   *         with return type Object
   * @since jQuery 1.2
   */
  @Nonnull
  public final IMPLTYPE triggerHandler ()
  {
    return jqinvoke ("triggerHandler");
  }

  /**
   * @return The invocation of the jQuery function <code>unbind()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE unbind ()
  {
    return jqinvoke ("unbind");
  }

  /**
   * @return The invocation of the jQuery function <code>undelegate()</code>
   *         with return type jQuery
   */
  @Nonnull
  public final IMPLTYPE undelegate ()
  {
    return jqinvoke ("undelegate");
  }

  /**
   * @return The invocation of the jQuery function <code>unload()</code> with
   *         return type jQuery
   * @deprecated Deprecated since jQuery 1.8
   */
  @Nonnull
  @Deprecated
  public final IMPLTYPE unload ()
  {
    return jqinvoke ("unload");
  }

  /**
   * @return The invocation of the jQuery function <code>unwrap()</code> with
   *         return type jQuery
   * @since jQuery 1.4
   */
  @Nonnull
  public final IMPLTYPE unwrap ()
  {
    return jqinvoke ("unwrap");
  }

  /**
   * @return The invocation of the jQuery function <code>val()</code> with
   *         return type null or jQuery
   */
  @Nonnull
  public final IMPLTYPE val ()
  {
    return jqinvoke ("val");
  }

  /**
   * @return The invocation of the jQuery function <code>width()</code> with
   *         return type Integer or jQuery
   */
  @Nonnull
  public final IMPLTYPE width ()
  {
    return jqinvoke ("width");
  }

  /**
   * @return The invocation of the jQuery function <code>wrap()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE wrap ()
  {
    return jqinvoke ("wrap");
  }

  /**
   * @return The invocation of the jQuery function <code>wrapAll()</code> with
   *         return type jQuery
   * @since jQuery 1.2
   */
  @Nonnull
  public final IMPLTYPE wrapAll ()
  {
    return jqinvoke ("wrapAll");
  }

  /**
   * @return The invocation of the jQuery function <code>wrapInner()</code> with
   *         return type jQuery
   */
  @Nonnull
  public final IMPLTYPE wrapInner ()
  {
    return jqinvoke ("wrapInner");
  }
}
